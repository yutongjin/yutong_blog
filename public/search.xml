<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise(1) Write a promise</title>
      <link href="/2020/10/16/Promise-1-Write-a-promise/"/>
      <url>/2020/10/16/Promise-1-Write-a-promise/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go back to Facebook</title>
      <link href="/2020/04/28/Go-back-to-Facebook/"/>
      <url>/2020/04/28/Go-back-to-Facebook/</url>
      
        <content type="html"><![CDATA[<blockquote><p>todo</p></blockquote><table><thead><tr><th align="center">question</th><th align="center">method?</th></tr></thead><tbody><tr><td align="center">delete node in BST</td><td align="center">recursive</td></tr><tr><td align="center">dp</td><td align="center"></td></tr><tr><td align="center">quick select</td><td align="center"></td></tr><tr><td align="center">union find</td><td align="center"></td></tr><tr><td align="center">palindrome substring</td><td align="center">dp做</td></tr></tbody></table><hr><a id="more"></a><h4 id="5-7-不能偷懒！！！！"><a href="#5-7-不能偷懒！！！！" class="headerlink" title="5.7 不能偷懒！！！！"></a>5.7 不能偷懒！！！！</h4><h5 id="Spiral-Matrix"><a href="#Spiral-Matrix" class="headerlink" title="Spiral Matrix"></a>Spiral Matrix</h5><p>两种做法，要不就在一个while循环里搞4个while循环 设置四个变量 空间o1<br>更直观的做法是假设你在里面走，然后循环螺旋遍历。空间on，代码也比较复杂</p><h5 id="Populating-Next-Right-Pointers-in-Each-Node-1-amp-2"><a href="#Populating-Next-Right-Pointers-in-Each-Node-1-amp-2" class="headerlink" title="Populating Next Right Pointers in Each Node 1 &amp; 2"></a>Populating Next Right Pointers in Each Node 1 &amp; 2</h5><p>默认就把自己当成不完全树做，用bfs搞，一层一层来。空间on</p><h4 id="5-4-E5大佬的面经，好好做！！！Link"><a href="#5-4-E5大佬的面经，好好做！！！Link" class="headerlink" title="5.4 E5大佬的面经，好好做！！！Link"></a>5.4 E5大佬的面经，好好做！！！<a href="https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=632977&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26sortid%3D311" target="_blank" rel="noopener">Link</a></h4><h5 id="odd-even-linked-list"><a href="#odd-even-linked-list" class="headerlink" title="odd even linked list"></a>odd even linked list</h5><p>你可以一点点挪，但是这样结尾的点可能停在odd end 也可能停在even end，需要加一个变量check一下。<br>最好办法是用记录两个list的oddhead和evenhead，base case是even的下一个没有了，这样一次挪两个。<br>结束的时候直接odd.next = 最开始记录的even head即可。 同时cover了len = 1和len = 2两种base case。</p><h5 id="单调函数"><a href="#单调函数" class="headerlink" title="单调函数"></a><a href="https://leetcode.com/problems/monotonic-array/" target="_blank" rel="noopener">单调函数</a></h5><p>记录一个变量，就这么做吧，没别的更好的办法了</p><hr><h4 id="5-2-周末快乐"><a href="#5-2-周末快乐" class="headerlink" title="5.2 周末快乐"></a>5.2 周末快乐</h4><h5 id="atmost-remove-1-char-to-make-palindrome"><a href="#atmost-remove-1-char-to-make-palindrome" class="headerlink" title="atmost remove 1 char to make palindrome"></a>atmost remove 1 char to make palindrome</h5><h5 id="palindrome-substring"><a href="#palindrome-substring" class="headerlink" title="palindrome substring"></a>palindrome substring</h5><p>dp不好理解的话， 尝试一下从中间char入手，效果惊人</p><h4 id="Find-Peak-Element"><a href="#Find-Peak-Element" class="headerlink" title="Find Peak Element"></a>Find Peak Element</h4><p>用你的思路去写，尽管代码复杂一点，说清楚就行！</p><hr><h4 id="4-30-有活干的感觉真爽"><a href="#4-30-有活干的感觉真爽" class="headerlink" title="4.30 有活干的感觉真爽"></a>4.30 有活干的感觉真爽</h4><h5 id="938-Range-Sum-of-BST"><a href="#938-Range-Sum-of-BST" class="headerlink" title="938 Range Sum of BST"></a>938 Range Sum of BST</h5><p>面经题，很像删bst node和222，优化可以到lgn（本题最坏情况on）</p><h5 id="138-Copy-List-with-Random-Pointer"><a href="#138-Copy-List-with-Random-Pointer" class="headerlink" title="138 Copy List with Random Pointer"></a>138 Copy List with Random Pointer</h5><p>经典fb tag，按照构图加走图的原则来做，构图的原因是如果不先把点弄出来，random的指针无法get到。<br>记得去做clone graph</p><hr><h4 id="4-29-困了晚上刷不动题怎么办"><a href="#4-29-困了晚上刷不动题怎么办" class="headerlink" title="4.29 困了晚上刷不动题怎么办"></a>4.29 困了晚上刷不动题怎么办</h4><h5 id="leetcode-973"><a href="#leetcode-973" class="headerlink" title="leetcode 973"></a>leetcode 973</h5><p>经典pq问题，优化从nlgn -&gt; klgn 解决。不懂为什么有人用快排，nlgn 甚至 n方的算法。但是快排还是得在面试前看一下，永远的痛。215.</p><h5 id="Merge-k-Sorted-Lists"><a href="#Merge-k-Sorted-Lists" class="headerlink" title="Merge k Sorted Lists"></a>Merge k Sorted Lists</h5><p>经典pq问题，divide and conquer也可以，得看下merge sort，也是痛。</p><h5 id="Valid-Palindrome"><a href="#Valid-Palindrome" class="headerlink" title="Valid Palindrome"></a>Valid Palindrome</h5><p>easy 面经题，注意大写字母转小写直接+32 然后cast就可以了</p><h5 id="Validate-Binary-Search-Tree"><a href="#Validate-Binary-Search-Tree" class="headerlink" title="Validate Binary Search Tree"></a>Validate Binary Search Tree</h5><p>停在null比较省代码，经典树题。</p><h5 id="Remove-Invalid-Parentheses"><a href="#Remove-Invalid-Parentheses" class="headerlink" title="Remove Invalid Parentheses"></a>Remove Invalid Parentheses</h5><p>经典面经301，还是bfs比较舒服，注意开头的砍枝，加分项。</p><h5 id="Binary-Tree-Vertical-Order-Traversal"><a href="#Binary-Tree-Vertical-Order-Traversal" class="headerlink" title="Binary Tree Vertical Order Traversal"></a>Binary Tree Vertical Order Traversal</h5><p>这题之前看过很多遍怎么还是卡住了，难点在于有两个顺序，一个从上到下，一个从左到右。</p><p>dfs 可以横向扩展，但是没法保证上下，需要用treemap，所以最暴力就是两个treemap搞定。</p><p>bfs自动保证上下顺序，再用一个level记录左右的level就可以了。</p><h5 id="Maximum-Points-You-Can-Obtain-from-Cards"><a href="#Maximum-Points-You-Can-Obtain-from-Cards" class="headerlink" title="Maximum Points You Can Obtain from Cards"></a>Maximum Points You Can Obtain from Cards</h5><p>经典题，直觉上dfs -&gt; dfs memo -&gt; dp 但是超时<br>从结果上入手，拿到的卡一定是左边连续i个加上右边连续k - i个，<br>反向sliding window，牛逼。</p><h5 id="Find-Largest-Value-in-Each-Tree-Row"><a href="#Find-Largest-Value-in-Each-Tree-Row" class="headerlink" title="Find Largest Value in Each Tree Row"></a>Find Largest Value in Each Tree Row</h5><p>Bfs模版</p><h5 id="Koko-Eating-Bananas"><a href="#Koko-Eating-Bananas" class="headerlink" title="Koko Eating Bananas"></a>Koko Eating Bananas</h5><p>经典binary search 练习模版</p><h5 id="Maximum-Score-After-Splitting-a-String"><a href="#Maximum-Score-After-Splitting-a-String" class="headerlink" title="Maximum Score After Splitting a String"></a>Maximum Score After Splitting a String</h5><p>index 细节题 仔细！！！</p><h5 id="Simplify-Path"><a href="#Simplify-Path" class="headerlink" title="Simplify Path"></a>Simplify Path</h5><p>string 处理，split()</p><h5 id="Tree-Diameter"><a href="#Tree-Diameter" class="headerlink" title="Tree Diameter"></a>Tree Diameter</h5><p>543的多叉树版本，可以当作模板</p><h5 id="Nested-List-Weight-Sum-II"><a href="#Nested-List-Weight-Sum-II" class="headerlink" title="Nested List Weight Sum II"></a>Nested List Weight Sum II</h5><p>Nest问题， map， 深度</p><h5 id="Valid-Parenthesis-String"><a href="#Valid-Parenthesis-String" class="headerlink" title="Valid Parenthesis String"></a>Valid Parenthesis String</h5><p>Amazon经典题，potential，分析上限下限。</p>]]></content>
      
      
      <categories>
          
          <category> backToFb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OS(2) Synchronization</title>
      <link href="/2020/04/16/OS-2-Synchronization/"/>
      <url>/2020/04/16/OS-2-Synchronization/</url>
      
        <content type="html"><![CDATA[<p>Case ： 来看两个共享counter变量的进程</p><p>Process 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">/* produce an item in next produced */</span></span><br><span class="line"><span class="keyword">while</span> (counter == BUFFER SIZE) ; <span class="comment">/* do nothing */</span></span><br><span class="line">buffer[in] = next produced; </span><br><span class="line">in = (in + <span class="number">1</span>) % BUFFER SIZE; </span><br><span class="line">counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Process 2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (counter == <span class="number">0</span>); <span class="comment">/* do nothing */</span></span><br><span class="line">next consumed = buffer[out]; </span><br><span class="line">out = (out + <span class="number">1</span>) % BUFFER SIZE; </span><br><span class="line">counter--;</span><br><span class="line"><span class="comment">/* consume the item in next consumed */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter++</span><br></pre></td></tr></table></figure><p>相当于下面三行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">register1 = counter </span><br><span class="line">register1 = register1 + <span class="number">1</span> </span><br><span class="line">counter = register1</span><br></pre></td></tr></table></figure><p>且</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter--</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">register2 = counter </span><br><span class="line">register2 = register1 - <span class="number">1</span> </span><br><span class="line">counter = register2</span><br></pre></td></tr></table></figure><p>有可能下面的情况出现<br><img src="/2020/04/16/OS-2-Synchronization/mutualProb.png" alt="alt"><br>(此处感谢<br><a href="https://myfavs.win/2019/08/08/%E8%AE%B0%E5%BD%95-Hexo-%E5%9B%BE%E7%89%87%E7%9A%84%E5%9D%91/" target="_blank" rel="noopener">https://myfavs.win/2019/08/08/%E8%AE%B0%E5%BD%95-Hexo-%E5%9B%BE%E7%89%87%E7%9A%84%E5%9D%91/</a><br>解决了图片问题)</p><h2 id="1-Critical-Section"><a href="#1-Critical-Section" class="headerlink" title="1.Critical Section"></a>1.Critical Section</h2><blockquote><p>The important feature of the system is that, when one process is executing in its critical section, no other process is allowed to execute in its critical section. That is, no two processes are executing in their critical sections at the same time. The critical-section problem is to design a protocol that the processes can use to cooperate. </p></blockquote><p>理解一下：一个进程在critical section里执行的时候，其他程序不可以进来。否则就会出现上述情况中的问题</p><h3 id="Three-Requirements"><a href="#Three-Requirements" class="headerlink" title="Three Requirements"></a>Three Requirements</h3><h4 id="1-Mutual-Exclusion"><a href="#1-Mutual-Exclusion" class="headerlink" title="1.Mutual Exclusion"></a>1.Mutual Exclusion</h4><blockquote><p>If process Pi is executing in its critical section, then no other processes can be executing in their critical sections.<br>基本就是字面意思</p></blockquote><h4 id="2-Progress"><a href="#2-Progress" class="headerlink" title="2. Progress"></a>2. Progress</h4><blockquote><p>If no process is executing in its critical section and some processes wish to enter their critical sections, then only those processes that are not executing in their remainder sections can participate in deciding which will enter its critical section next, and this selection cannot be postponed indefinitely.</p></blockquote><p>中文翻译： 如果没有进程在其临界区内执行且有进程需进入临界区，那么只有那么不在剩余区内执行的进程可参加选择，以确定谁能下一个进入临界区，且这种选择不能无限推迟；（wtf？？？？？）</p><p>研究一番之后的理解：所有程序都在make progress而不是傻等。</p><ol><li>critical section里的程序，继续干自己的事</li><li>critical section结束的还在remainder section的程序，继续把自己的干完，先别想着下次进来</li><li>其他程序，别傻等着，好好去想一想下一个谁进来</li><li>你们决定的过程要在有限时长内完成（无deadlock 或者 livelock 出现）</li></ol><h4 id="3-Bounded-Waiting"><a href="#3-Bounded-Waiting" class="headerlink" title="3.Bounded Waiting"></a>3.Bounded Waiting</h4><blockquote><p>There exists a bound, or limit, on the number of times that other processes are allowed to enter their critical sections after a entry section critical section exit section.</p></blockquote><p>每个程序都会进入critical section 而不是starve forever.</p><h2 id="2-Peterson-Solution-and-Dekker’s-Solution"><a href="#2-Peterson-Solution-and-Dekker’s-Solution" class="headerlink" title="2. Peterson Solution and Dekker’s Solution"></a>2. Peterson Solution and Dekker’s Solution</h2><h3 id="Peterson"><a href="#Peterson" class="headerlink" title="Peterson"></a>Peterson</h3><p><img src="/2020/04/16/OS-2-Synchronization/Peterson.png" alt></p><h3 id="Dekker"><a href="#Dekker" class="headerlink" title="Dekker"></a>Dekker</h3><p>There is a process on how versions change.</p><blockquote><p><a href="https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OS(1) basic</title>
      <link href="/2020/04/13/OS-1-basic/"/>
      <url>/2020/04/13/OS-1-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="OS-services-functions"><a href="#OS-services-functions" class="headerlink" title="OS services functions"></a>OS services functions</h2><ul><li>User Interface</li><li>Program execution</li><li>I/O operatings</li><li>File-system manipulation</li><li>Communications(between processes)</li><li>Error detection</li></ul><h3 id="others"><a href="#others" class="headerlink" title="others"></a>others</h3><ul><li>Resource allocation</li><li>Accounting</li><li>Protection and security</li></ul><h2 id="Process-Unit-of-work"><a href="#Process-Unit-of-work" class="headerlink" title="Process(Unit of work)"></a>Process(Unit of work)</h2><h3 id="5-states"><a href="#5-states" class="headerlink" title="5 states"></a>5 states</h3><ul><li>New</li><li>Running</li><li>Waiting</li><li>Ready</li><li>Terminated</li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Effective Java C6i40 ---- Override Annotation</title>
      <link href="/2020/04/10/Effective-Java-2-1-Override-Annotation/"/>
      <url>/2020/04/10/Effective-Java-2-1-Override-Annotation/</url>
      
        <content type="html"><![CDATA[<p>Given a class below :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Can you spot the bug? (Page 188)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bigram</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> second;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bigram</span><span class="params">(<span class="keyword">char</span> first, <span class="keyword">char</span> second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first  = first;</span><br><span class="line">        <span class="keyword">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Bigram b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.first == first &amp;&amp; b.second == second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span> * first + second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;Bigram&gt; s = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">'a'</span>; ch &lt;= <span class="string">'z'</span>; ch++)</span><br><span class="line">                s.add(<span class="keyword">new</span> Bigram(ch, ch));</span><br><span class="line">        System.out.println(s.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//what we want is 26.</span></span><br><span class="line"><span class="comment">//but the real answer is 260</span></span><br></pre></td></tr></table></figure><p>If we don’t add Override annotation, equals method will not work.</p><p>Actually we want to override equals and even hashCode method, however, there is no <strong>@Override</strong> annotation.</p><p>Also the type of parameter we pass into equals method is wrong,(should be Object).</p><p>So overloading happens instead of overriding.</p><p>Whatever we do in Set s, s deals with different element within it by Object.equals method :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Indicates whether some other object is "equal to" this one.</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;</span></span><br><span class="line"><span class="comment">   * The &#123;<span class="doctag">@code</span> equals&#125; method implements an equivalence relation</span></span><br><span class="line"><span class="comment">   * on non-null object references:</span></span><br><span class="line"><span class="comment">   * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">   * &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> x&#125;, &#123;<span class="doctag">@code</span> x.equals(x)&#125; should return</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">   * &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> x&#125; and &#123;<span class="doctag">@code</span> y&#125;, &#123;<span class="doctag">@code</span> x.equals(y)&#125;</span></span><br><span class="line"><span class="comment">   *     should return &#123;<span class="doctag">@code</span> true&#125; if and only if</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> y.equals(x)&#125; returns &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">   * &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> x&#125;, &#123;<span class="doctag">@code</span> y&#125;, and &#123;<span class="doctag">@code</span> z&#125;, if</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> x.equals(y)&#125; returns &#123;<span class="doctag">@code</span> true&#125; and</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> y.equals(z)&#125; returns &#123;<span class="doctag">@code</span> true&#125;, then</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> x.equals(z)&#125; should return &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">   * &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> x&#125; and &#123;<span class="doctag">@code</span> y&#125;, multiple invocations of</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> x.equals(y)&#125; consistently return &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">   *     or consistently return &#123;<span class="doctag">@code</span> false&#125;, provided no</span></span><br><span class="line"><span class="comment">   *     information used in &#123;<span class="doctag">@code</span> equals&#125; comparisons on the</span></span><br><span class="line"><span class="comment">   *     objects is modified.</span></span><br><span class="line"><span class="comment">   * &lt;li&gt;For any non-null reference value &#123;<span class="doctag">@code</span> x&#125;,</span></span><br><span class="line"><span class="comment">   *     &#123;<span class="doctag">@code</span> x.equals(null)&#125; should return &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">   * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;</span></span><br><span class="line"><span class="comment">   * The &#123;<span class="doctag">@code</span> equals&#125; method for class &#123;<span class="doctag">@code</span> Object&#125; implements</span></span><br><span class="line"><span class="comment">   * the most discriminating possible equivalence relation on objects;</span></span><br><span class="line"><span class="comment">   * that is, for any non-null reference values &#123;<span class="doctag">@code</span> x&#125; and</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@code</span> y&#125;, this method returns &#123;<span class="doctag">@code</span> true&#125; if and only</span></span><br><span class="line"><span class="comment">   * if &#123;<span class="doctag">@code</span> x&#125; and &#123;<span class="doctag">@code</span> y&#125; refer to the same object</span></span><br><span class="line"><span class="comment">   * (&#123;<span class="doctag">@code</span> x == y&#125; has the value &#123;<span class="doctag">@code</span> true&#125;).</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;</span></span><br><span class="line"><span class="comment">   * Note that it is generally necessary to override the &#123;<span class="doctag">@code</span> hashCode&#125;</span></span><br><span class="line"><span class="comment">   * method whenever this method is overridden, so as to maintain the</span></span><br><span class="line"><span class="comment">   * general contract for the &#123;<span class="doctag">@code</span> hashCode&#125; method, which states</span></span><br><span class="line"><span class="comment">   * that equal objects must have equal hash codes.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>   obj   the reference object with which to compare.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if this object is the same as the obj</span></span><br><span class="line"><span class="comment">   *          argument; &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span>     #hashCode()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span>     java.util.HashMap</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br></pre></td></tr></table></figure><p>So there are different 260 objects in s.</p><h3 id="Properties-of-equals-function"><a href="#Properties-of-equals-function" class="headerlink" title="Properties of equals function"></a>Properties of equals function</h3><ul><li>reflexive</li><li>symmetric</li><li>transitive</li><li>consistent</li><li>non-null x =&gt; x.equals(null) =&gt; false</li><li>x,y =&gt; refer to the same object =&gt; true</li><li>remember to add @Override and override hashCode method</li></ul><blockquote><p>clutter : 混乱<br>deem : 认为</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Override Equals </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github page 域名访问显示404 解决方法</title>
      <link href="/2020/04/08/github-page-%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E6%98%BE%E7%A4%BA404-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/04/08/github-page-%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E6%98%BE%E7%A4%BA404-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site" target="_blank" rel="noopener">https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redux(2)---Data Flow</title>
      <link href="/2020/04/07/Redux-2-Data-Flow/"/>
      <url>/2020/04/07/Redux-2-Data-Flow/</url>
      
        <content type="html"><![CDATA[<p>Redux architecture revolves around a <strong>strict unidirectional data<strong> flow.</strong></strong></p><h3 id="1-You-call-store-dispatch-action"><a href="#1-You-call-store-dispatch-action" class="headerlink" title="1. You call store.dispatch(action)"></a>1. You call store.dispatch(action)</h3><p>from anywhere in your app, including components and XHR callbacks, or even at scheduled intervals.</p><h3 id="2-The-Redux-store-calls-the-reducer-function-you-gave-it"><a href="#2-The-Redux-store-calls-the-reducer-function-you-gave-it" class="headerlink" title="2. The Redux store calls the reducer function you gave it."></a>2. The Redux store calls the reducer function you gave it.</h3><p>The store will pass two arguments to the reducer: the <font color="orange">current state</font> tree and the <font color="orange">action</font>. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The current application state (list of todos and chosen filter)</span></span><br><span class="line"><span class="keyword">let</span> previousState = &#123;</span><br><span class="line">  visibleTodoFilter: <span class="string">'SHOW_ALL'</span>,</span><br><span class="line">  todos: [</span><br><span class="line">    &#123;</span><br><span class="line">      text: <span class="string">'Read the docs.'</span>,</span><br><span class="line">      complete: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The action being performed (adding a todo)</span></span><br><span class="line"><span class="keyword">let</span> action = &#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  text: <span class="string">'Understand the flow.'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your reducer returns the next application state</span></span><br><span class="line"><span class="keyword">let</span> nextState = todoApp(previousState, action)</span><br></pre></td></tr></table></figure><blockquote><p>Note that a reducer is a pure function. It only computes the next state. It should be completely predictable: calling it with the same inputs many times should produce the same outputs. It shouldn’t perform any side effects like API calls or router transitions. These should happen before an action is dispatched.</p></blockquote><h3 id="3-The-root-reducer-may-combine-the-output-of-multiple-reducers-into-a-single-state-tree"><a href="#3-The-root-reducer-may-combine-the-output-of-multiple-reducers-into-a-single-state-tree" class="headerlink" title="3. The root reducer may combine the output of multiple reducers into a single state tree."></a>3. The root reducer may combine the output of multiple reducers into a single state tree.</h3><h3 id="4-The-Redux-store-saves-the-complete-state-tree-returned-by-the-root-reducer"><a href="#4-The-Redux-store-saves-the-complete-state-tree-returned-by-the-root-reducer" class="headerlink" title="4. The Redux store saves the complete state tree returned by the root reducer."></a>4. The Redux store saves the complete state tree returned by the root reducer.</h3><p>This new tree is now the next state of your app! Every listener registered with store.subscribe(listener) will now be invoked; listeners may call store.getState() to get the current state.</p><p>Now, the UI can be updated to reflect the new state. If you use bindings like React Redux, this is the point at which component.setState(newState) is called.</p><p><a href="https://redux.js.org/basics/data-flow" target="_blank" rel="noopener">https://redux.js.org/basics/data-flow</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redux(1)---Three Principles and Concepts</title>
      <link href="/2020/04/07/Redux-1/"/>
      <url>/2020/04/07/Redux-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Three-Principles"><a href="#Three-Principles" class="headerlink" title="Three Principles"></a>Three Principles</h2><h4 id="1-Single-source-of-truth"><a href="#1-Single-source-of-truth" class="headerlink" title="1. Single source of truth"></a>1. Single source of truth</h4><p> The state of your whole application is stored in an object tree within a single store.</p><h4 id="2-State-is-read-only"><a href="#2-State-is-read-only" class="headerlink" title="2. State is read-only"></a>2. State is read-only</h4><p> The only way to change the state is to emit an action, an object describing what happened.</p><h4 id="3-Changes-are-made-with-pure-functions"><a href="#3-Changes-are-made-with-pure-functions" class="headerlink" title="3. Changes are made with pure functions"></a>3. Changes are made with pure functions</h4><p> To specify how the state tree is transformed by actions, you write pure reducers.</p><h4 id="Other-Tips"><a href="#Other-Tips" class="headerlink" title="Other Tips"></a>Other Tips</h4><ul><li>Redux assumes you never mutate your data.</li><li>Redux does not have the concept of a Dispatcher. This is because it relies on pure functions instead of event emitters, and pure functions are easy to compose and don’t need an additional entity managing them.</li><li>Redux doesn’t care how you store the state—it can be a plain object, an Immutable object, or anything else.</li></ul><h2 id="Three-Concepts"><a href="#Three-Concepts" class="headerlink" title="Three Concepts"></a>Three Concepts</h2><h4 id="1-Action"><a href="#1-Action" class="headerlink" title="1. Action"></a>1. Action</h4><p>Actions are payloads of information that send data from your application to your store. They are the only source of information for the store. You send them to the store using store.dispatch().</p><ul><li>Actions must have a <strong>type</strong> property that indicates the type of action being performed. </li></ul><h4 id="2-Reducer"><a href="#2-Reducer" class="headerlink" title="2. Reducer"></a>2. Reducer</h4><p>Reducers specify how the application’s state changes in response to actions sent to the store. Remember that actions only describe what happened, but don’t describe how the application’s state changes.</p><ul><li>It’s called a reducer because it’s the type of function you would pass to Array.prototype.reduce(reducer, ?initialValue).</li></ul><h4 id="Things-you-should-never-do-inside-a-reducer"><a href="#Things-you-should-never-do-inside-a-reducer" class="headerlink" title="Things you should never do inside a reducer:"></a>Things you should never do inside a reducer:</h4><ul><li>Mutate its arguments;</li><li>Perform side effects like API calls and routing transitions;</li><li>Call non-pure functions, e.g. Date.now() or Math.random().</li></ul><blockquote><p>We’ll explore how to perform side effects in the advanced walkthrough. For now, just remember that the reducer must be pure. Given the same arguments, it should calculate the next state and return it. No surprises. No side effects. No API calls. No mutations. Just a calculation.</p></blockquote><h4 id="3-Store"><a href="#3-Store" class="headerlink" title="3. Store"></a>3. Store</h4><p>The Store is the object that brings <strong>Actions</strong> and <strong>Reducers</strong>  together. </p><p>The store has the following responsibilities:</p><ul><li>Holds application state;</li><li>Allows access to state via getState();</li><li>Allows state to be updated via dispatch(action);</li><li>Registers listeners via subscribe(listener);</li><li>Handles unregistering of listeners via the function returned by subscribe(listener).<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(todoApp)</span><br></pre></td></tr></table></figure><blockquote><p>It’s important to note that you’ll only have a single store in a Redux application. When you want to split your data handling logic, you’ll use reducer composition instead of many stores.</p></blockquote></li></ul><p><a href="https://redux.js.org/introduction/three-principles" target="_blank" rel="noopener">https://redux.js.org/introduction/three-principles</a><br>Learning Resources: <a href="https://redux.js.org/introduction/learning-resources" target="_blank" rel="noopener">https://redux.js.org/introduction/learning-resources</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>this,bind,arrow function in js</title>
      <link href="/2020/04/03/this-bind-arrow-function-in-js/"/>
      <url>/2020/04/03/this-bind-arrow-function-in-js/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    b:<span class="number">1</span>,</span><br><span class="line">  c:<span class="number">10</span>,</span><br><span class="line">    foo:<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.c);</span><br><span class="line">&#125;,</span><br><span class="line">  bar:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.bar();<span class="comment">//普通函数，this 指向a</span></span><br><span class="line">a.foo();<span class="comment">//arrow function 没有默认this 指针，故函数里的this指向a所在的window</span></span><br><span class="line"><span class="keyword">var</span> fun = a.foo;<span class="comment">//把a.foo function 传给 fun</span></span><br><span class="line">fun();<span class="comment">//在window scope下执行fun，this --&gt; window</span></span><br><span class="line"><span class="keyword">var</span> funBind = a.bar.bind(a);<span class="comment">//bind a.bar to a </span></span><br><span class="line">funBind();<span class="comment">//binded to a</span></span><br><span class="line">funBind = a.bar.bind(<span class="keyword">this</span>);<span class="comment">//bind a.bar to this</span></span><br><span class="line">funBind();<span class="comment">// binded to window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fooArrow = a.bar;</span><br><span class="line">fooArrow();</span><br></pre></td></tr></table></figure><p><a href="https://www.codementor.io/@dariogarciamoya/understanding-this-in-javascript-with-arrow-functions-gcpjwfyuc" target="_blank" rel="noopener">https://www.codementor.io/@dariogarciamoya/understanding-this-in-javascript-with-arrow-functions-gcpjwfyuc</a><br><a href="https://medium.com/tfogo/advantages-and-pitfalls-of-arrow-functions-a16f0835799e" target="_blank" rel="noopener">https://medium.com/tfogo/advantages-and-pitfalls-of-arrow-functions-a16f0835799e</a><br><a href="https://dmitripavlutin.com/when-not-to-use-arrow-functions-in-javascript/" target="_blank" rel="noopener">https://dmitripavlutin.com/when-not-to-use-arrow-functions-in-javascript/</a><br><a href="https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1" target="_blank" rel="noopener">https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1</a><br><a href="https://hackernoon.com/javascript-es6-arrow-functions-and-lexical-this-f2a3e2a5e8c4" target="_blank" rel="noopener">https://hackernoon.com/javascript-es6-arrow-functions-and-lexical-this-f2a3e2a5e8c4</a><br><a href="https://stackoverflow.com/questions/52979915/why-we-dont-need-to-bind-the-arrow-function-in-react" target="_blank" rel="noopener">https://stackoverflow.com/questions/52979915/why-we-dont-need-to-bind-the-arrow-function-in-react</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重温HF之3-掌握多态性</title>
      <link href="/2020/03/21/%E9%87%8D%E6%B8%A9HF%E4%B9%8B3-%E6%8E%8C%E6%8F%A1%E5%A4%9A%E6%80%81%E6%80%A7/"/>
      <url>/2020/03/21/%E9%87%8D%E6%B8%A9HF%E4%B9%8B3-%E6%8E%8C%E6%8F%A1%E5%A4%9A%E6%80%81%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-static-多态"><a href="#1-static-多态" class="headerlink" title="1. static 多态"></a>1. static 多态</h2><p>也叫compile 多态，本质就是编译时method的多态性，其实就是方法的overload.</p><blockquote><p>Same method name is overloaded with different type or number of parameters in same class (different signature). Targeted method call is resolved at compile time</p></blockquote><h2 id="2-dynamic-多态"><a href="#2-dynamic-多态" class="headerlink" title="2.dynamic 多态"></a>2.dynamic 多态</h2><p>也叫runtime 多态，本质是继承属性和函数override的组合。<br>看过很多文章在讲向上转型（upcasting）和向下转型（downcasting），有的文章讲的非常复杂，研究了一番后打算总结如下。</p><h3 id="（1）向下转型"><a href="#（1）向下转型" class="headerlink" title="（1）向下转型"></a>（1）向下转型</h3><p>其实是最简单的一种–人工强制cast。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sup</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Sup m1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Sup</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Sub m1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Sub m2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们进行一个操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sup a = <span class="keyword">new</span> Sub();</span><br><span class="line">a.m1();<span class="comment">// Sub m1</span></span><br><span class="line">a.m2();<span class="comment">// 找不到符号，因为 ref 为 a的变量找不到m2方法，也就是上一章我们说过的父类不知道子类</span></span><br><span class="line">((Sub)a).m2();<span class="comment">//如果想调用Sub实例的方法，就必须强制cast，但是操作危险性大。</span></span><br></pre></td></tr></table></figure><h3 id="（2）向上转型"><a href="#（2）向上转型" class="headerlink" title="（2）向上转型"></a>（2）向上转型</h3><p>说白了，向上转型就是</p><h5 id="1-在自己的ref-class-里没有找到想要的方法，把自己（自动向上转型）变成父类找这个方法。"><a href="#1-在自己的ref-class-里没有找到想要的方法，把自己（自动向上转型）变成父类找这个方法。" class="headerlink" title="1.在自己的ref class 里没有找到想要的方法，把自己（自动向上转型）变成父类找这个方法。"></a>1.在自己的ref class 里没有找到想要的方法，把自己（自动向上转型）变成父类找这个方法。</h5><h5 id="2-找到的话再以new出来的对象为bottom看看override到哪层。"><a href="#2-找到的话再以new出来的对象为bottom看看override到哪层。" class="headerlink" title="2.找到的话再以new出来的对象为bottom看看override到哪层。"></a>2.找到的话再以new出来的对象为bottom看看override到哪层。</h5><blockquote><p>我们不妨换个思考的角度，为什么要 “把自己（自动向上转型）变成父类”？？？</p></blockquote><h5 id="我本身就是个父类啊，继承就是因为我满足了IS-A关系，我为什么不能默认把父类的方法都取到自己身上然后去找呢？"><a href="#我本身就是个父类啊，继承就是因为我满足了IS-A关系，我为什么不能默认把父类的方法都取到自己身上然后去找呢？" class="headerlink" title="我本身就是个父类啊，继承就是因为我满足了IS-A关系，我为什么不能默认把父类的方法都取到自己身上然后去找呢？"></a>我本身就是个父类啊，继承就是因为我满足了IS-A关系，我为什么不能默认把父类的方法都取到自己身上然后去找呢？</h5><p>so 找到之后再从ref 往下 看有没有override的情况然后以new出来的对象为底，结束。</p><p><strong>如果形式参数没有怎么办?</strong></p><blockquote><p>答：把形式参数多态向上找。</p></blockquote><h2 id="用一个经典案例解释上面"><a href="#用一个经典案例解释上面" class="headerlink" title="用一个经典案例解释上面"></a>用一个经典案例解释上面</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestForPoli</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"A and D"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"A and A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"B and B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"B and A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">showOnlyInB</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"showOnlyInB"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"C and D"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"D and D"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        A a2 = <span class="keyword">new</span> B();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        D d = <span class="keyword">new</span> D();</span><br><span class="line">        A ac = <span class="keyword">new</span> C();</span><br><span class="line">        B bc = <span class="keyword">new</span> D();</span><br><span class="line">        System.out.println(<span class="string">"1--"</span> + a1.show(b));</span><br><span class="line">        System.out.println(<span class="string">"2--"</span> + a1.show(c));</span><br><span class="line">        System.out.println(<span class="string">"3--"</span> + a1.show(d));</span><br><span class="line">        System.out.println(<span class="string">"4--"</span> + a2.show(b));</span><br><span class="line">        System.out.println(<span class="string">"5--"</span> + a2.show(c));</span><br><span class="line">        System.out.println(<span class="string">"6--"</span> + a2.show(d));</span><br><span class="line">        System.out.println(<span class="string">"7--"</span> + b.show(b));</span><br><span class="line">        System.out.println(<span class="string">"8--"</span> + b.show(c));</span><br><span class="line">        System.out.println(<span class="string">"9--"</span> + b.show(d));</span><br><span class="line">        System.out.println(<span class="string">"10--"</span> + ac.show(d));</span><br><span class="line">        System.out.println(<span class="string">"11--"</span> + bc.show(d));</span><br><span class="line">        <span class="comment">//test for down cast</span></span><br><span class="line">        System.out.println(<span class="string">"12--"</span> + ((B)a2).show(b));</span><br><span class="line">        <span class="comment">//System.out.println("13--" + a2.showOnlyInB());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>--A and A</span><br><span class="line"><span class="number">2</span>--A and A</span><br><span class="line"><span class="number">3</span>--A and D</span><br><span class="line"><span class="number">4</span>--B and A</span><br><span class="line"><span class="number">5</span>--B and A</span><br><span class="line"><span class="number">6</span>--A and D</span><br><span class="line"><span class="number">7</span>--B and B</span><br><span class="line"><span class="number">8</span>--B and B</span><br><span class="line"><span class="number">9</span>--A and D</span><br><span class="line"><span class="number">10</span>--C and D</span><br><span class="line"><span class="number">11</span>--D and D</span><br><span class="line"><span class="number">12</span>--B and B</span><br></pre></td></tr></table></figure><h4 id="（1）a1-show-b"><a href="#（1）a1-show-b" class="headerlink" title="（1）a1.show(b)"></a>（1）a1.show(b)</h4><blockquote><p>a1 ：ref为A，实例为A，向上的关系只有object，show（b）找不到，尝试去找show（（super）b）也就是把形式参数向上转型，找到了show（A a）方法，所以输出A and A。<br>2 3 同理。</p></blockquote><h4 id="（2）a2-show-b"><a href="#（2）a2-show-b" class="headerlink" title="（2）a2.show(b)"></a>（2）a2.show(b)</h4><blockquote><p>a2 ：ref为A，实例为B，向上的关系只有object，show（b）找不到，尝试去找show（（super）b）就是把形式参数向上转型，找到了show（A a）方法，（到这里和上面是一样的），但是实例为B，我们需要进行的操作是看show（A a）方法有没有被override，然后发现class B里有一个show（A a）的方法，故输出B and A<br>5 同理，6是因为A里直接有一个show（D d）的method，而且这个方法没有被实例B override，故输出A and D<br>7 easy</p></blockquote><h4 id="（3）b-show-c"><a href="#（3）b-show-c" class="headerlink" title="（3）b.show(c)"></a>（3）b.show(c)</h4><p>这里我们使用向上转型继承的方法，把b的super类a的方法都加到b里，然后还是没有找到show（B）的办法，我们此时就去找形式参数c的super类，向上找到了B，于是输出B and B</p><h4 id="（4）b-show-d"><a href="#（4）b-show-d" class="headerlink" title="（4）b.show(d)"></a>（4）b.show(d)</h4><p>这里我们使用向上转型继承的方法，把b的super类a的方法都加到b里，解决。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重温HF之2-把继承搞明白</title>
      <link href="/2020/03/19/%E9%87%8D%E6%B8%A9HF%E4%B9%8B2-%E6%8A%8A%E7%BB%A7%E6%89%BF%E6%90%9E%E6%98%8E%E7%99%BD/"/>
      <url>/2020/03/19/%E9%87%8D%E6%B8%A9HF%E4%B9%8B2-%E6%8A%8A%E7%BB%A7%E6%89%BF%E6%90%9E%E6%98%8E%E7%99%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="1-继承时方法会被override但是成员变量不会被override"><a href="#1-继承时方法会被override但是成员变量不会被override" class="headerlink" title="1. 继承时方法会被override但是成员变量不会被override"></a>1. 继承时方法会被override但是成员变量不会被override</h4><h4 id="2-子类可以同时获得自己和父类的non-private成员变量，但是父类不知道子类。"><a href="#2-子类可以同时获得自己和父类的non-private成员变量，但是父类不知道子类。" class="headerlink" title="2. 子类可以同时获得自己和父类的non-private成员变量，但是父类不知道子类。"></a>2. 子类可以同时获得自己和父类的non-private成员变量，但是父类不知道子类。</h4><h4 id="3-final方法不可以被继承"><a href="#3-final方法不可以被继承" class="headerlink" title="3. final方法不可以被继承"></a>3. final方法不可以被继承</h4><h4 id="4-static方法不可以被继承，随着类的加载而加载，继承毛线。但是如果权限允许子类还是可以用。"><a href="#4-static方法不可以被继承，随着类的加载而加载，继承毛线。但是如果权限允许子类还是可以用。" class="headerlink" title="4. static方法不可以被继承，随着类的加载而加载，继承毛线。但是如果权限允许子类还是可以用。"></a>4. static方法不可以被继承，随着类的加载而加载，继承毛线。但是如果权限允许子类还是可以用。</h4><h4 id="5-继承的好处是是可以提高效率，抽取封装，缺点是提高了代码耦合。"><a href="#5-继承的好处是是可以提高效率，抽取封装，缺点是提高了代码耦合。" class="headerlink" title="5. 继承的好处是是可以提高效率，抽取封装，缺点是提高了代码耦合。"></a>5. 继承的好处是是可以提高效率，抽取封装，缺点是提高了代码耦合。</h4><h4 id="6-牢记is-a法则"><a href="#6-牢记is-a法则" class="headerlink" title="6. 牢记is-a法则"></a>6. 牢记is-a法则</h4><p>reciprocates ： 往复运动<br>rigid ： 严格的<br><a href="https://zhuanlan.zhihu.com/p/44670566" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44670566</a><br>详细介绍：<a href="https://www.cnblogs.com/roy-blog/p/7669143.html" target="_blank" rel="noopener">https://www.cnblogs.com/roy-blog/p/7669143.html</a><br>延伸 ： 类加载过程 <a href="https://zhuanlan.zhihu.com/p/33509426" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33509426</a><br>多态：<a href="https://www.jianshu.com/p/b7fd72de2d0e" target="_blank" rel="noopener">https://www.jianshu.com/p/b7fd72de2d0e</a><br>static : <a href="https://zhuanlan.zhihu.com/p/70110497" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/70110497</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重温HF之1--基本对象</title>
      <link href="/2020/03/17/%E9%87%8D%E6%B8%A9HF%E4%B9%8B1-%E5%9F%BA%E6%9C%AC%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/03/17/%E9%87%8D%E6%B8%A9HF%E4%B9%8B1-%E5%9F%BA%E6%9C%AC%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="1-8种基本类型-primitive-types-boolean、char、byte、int、long、short、float、double"><a href="#1-8种基本类型-primitive-types-boolean、char、byte、int、long、short、float、double" class="headerlink" title="1. 8种基本类型(primitive types) : boolean、char、byte、int、long、short、float、double."></a>1. 8种基本类型(primitive types) : boolean、char、byte、int、long、short、float、double.</h4><h4 id="2-Java-is-pass-by-value-which-means-pass-by-copy-Everything-copy-of-primitive-or-copy-of-a-remote-reference-to-an-object"><a href="#2-Java-is-pass-by-value-which-means-pass-by-copy-Everything-copy-of-primitive-or-copy-of-a-remote-reference-to-an-object" class="headerlink" title="2. Java is pass by value, which means pass by copy. Everything, copy of primitive or copy of a remote reference to an object."></a>2. Java is pass by value, which means pass by copy. Everything, copy of primitive or copy of a remote reference to an object.</h4><h4 id="3-类成员变量有初始值，任何局部变量没有默认值，若不initialize就使用会error，数字一旦new-出来之后就有默认值。"><a href="#3-类成员变量有初始值，任何局部变量没有默认值，若不initialize就使用会error，数字一旦new-出来之后就有默认值。" class="headerlink" title="3. 类成员变量有初始值，任何局部变量没有默认值，若不initialize就使用会error，数字一旦new 出来之后就有默认值。"></a>3. 类成员变量有初始值，任何局部变量没有默认值，若不initialize就使用会error，数字一旦new 出来之后就有默认值。</h4><h4 id="4-比较bits-in-two-variables-what-those-bits-represent-doesn’t-matter"><a href="#4-比较bits-in-two-variables-what-those-bits-represent-doesn’t-matter" class="headerlink" title="4. == 比较bits in two variables, what those bits represent doesn’t matter."></a>4. == 比较bits in two variables, what those bits represent doesn’t matter.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(a == b)&#123;<span class="comment">// true cast byte to int&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-比较primitives-或者-指向相同对象的引用可以用-比较对象是否是同一对象用-equals"><a href="#5-比较primitives-或者-指向相同对象的引用可以用-比较对象是否是同一对象用-equals" class="headerlink" title="5. 比较primitives 或者 指向相同对象的引用可以用 ==, 比较对象是否是同一对象用.equals()."></a>5. 比较primitives 或者 指向相同对象的引用可以用 ==, 比较对象是否是同一对象用.equals().</h4><h4 id="6-import-！-include，只是为了声明class的时候省事"><a href="#6-import-！-include，只是为了声明class的时候省事" class="headerlink" title="6. import ！= include，只是为了声明class的时候省事"></a>6. import ！= include，只是为了声明class的时候省事</h4><h4 id="7-java-lang-类不需要导入，包含System，String等类。"><a href="#7-java-lang-类不需要导入，包含System，String等类。" class="headerlink" title="7. java.lang 类不需要导入，包含System，String等类。"></a>7. java.lang 类不需要导入，包含System，String等类。</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简单谈谈java里的堆和栈</title>
      <link href="/2020/03/12/%E7%AE%80%E5%8D%95%E8%B0%88%E8%B0%88java%E9%87%8C%E7%9A%84%E5%A0%86%E5%92%8C%E6%A0%88/"/>
      <url>/2020/03/12/%E7%AE%80%E5%8D%95%E8%B0%88%E8%B0%88java%E9%87%8C%E7%9A%84%E5%A0%86%E5%92%8C%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>Java把内存分成两种，一种叫做栈内存，一种叫做堆内存</p><p>在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配。当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。</p><p>堆内存用于存放由new创建的对象和数组。在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名，或者代号。</p><p>引用变量是普通变量，定义时在栈中分配内存，引用变量在程序运行到作用域外释放。而数组＆对象本身在堆中分配，即使程序运行到使用new产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，数组和对象在没有引用变量指向它的时候，才变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉。这个也是java比较占内存的主要原因，实际上，栈中的变量指向堆内存中的变量，这就是 Java 中的指针!<br><a href="https://iamjohnnyzhuang.github.io/java/2016/07/12/Java%E5%A0%86%E5%92%8C%E6%A0%88%E7%9C%8B%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F.html" target="_blank" rel="noopener">https://iamjohnnyzhuang.github.io/java/2016/07/12/Java%E5%A0%86%E5%92%8C%E6%A0%88%E7%9C%8B%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F.html</a></p><p><a href="https://juejin.im/post/5b7d69e4e51d4538ca5730cb#heading-14" target="_blank" rel="noopener">https://juejin.im/post/5b7d69e4e51d4538ca5730cb#heading-14</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>“conquer Singleton”</title>
      <link href="/2020/03/06/Singleton%E2%80%9D/"/>
      <url>/2020/03/06/Singleton%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/eb30a388c5fc" target="_blank" rel="noopener">https://www.jianshu.com/p/eb30a388c5fc</a></p><h2 id="Eager"><a href="#Eager" class="headerlink" title="Eager"></a>Eager</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingleB INSTANCE = <span class="keyword">new</span> SingleB();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleB</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleB <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="Lazy"></a>Lazy</h2><p>如果一个对象使用频率不高，占用内存还特别大，明显就不合适用饿汉式了，这时就需要一种懒加载的思想，当程序需要这个实例的时候才去创建对象，就如同一个人懒的饿到不行了才去吃东西。<br>v1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Version 1.1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single1 instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Single1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v2加锁版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonClass SINGLE_INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLE_INSTANCE == <span class="keyword">null</span>) &#123;  </span><br><span class="line">          <span class="keyword">synchronized</span>(SingletonClass<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">          SINGLE_INSTANCE = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SINGLE_INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v3 加锁版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonClass SINGLE_INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLE_INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonClass<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (SINGLE_INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    SINGLE_INSTANCE = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SINGLE_INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5c94654e6fb9a071090d63ac" target="_blank" rel="noopener">https://juejin.im/post/5c94654e6fb9a071090d63ac</a><br><a href="https://blog.csdn.net/gavin_dyson/article/details/69668946" target="_blank" rel="noopener">https://blog.csdn.net/gavin_dyson/article/details/69668946</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Effective Java 1.1</title>
      <link href="/2020/03/06/Effective-Java-1-1/"/>
      <url>/2020/03/06/Effective-Java-1-1/</url>
      
        <content type="html"><![CDATA[<p>每天学一点点，记录一点点。</p><h3 id="考虑使用静态工厂方法代替构造器"><a href="#考虑使用静态工厂方法代替构造器" class="headerlink" title="考虑使用静态工厂方法代替构造器"></a>考虑使用静态工厂方法代替构造器</h3><h2 id="能够增大类的提供者对自己所提供的类的控制力。"><a href="#能够增大类的提供者对自己所提供的类的控制力。" class="headerlink" title="能够增大类的提供者对自己所提供的类的控制力。"></a>能够增大类的提供者对自己所提供的类的控制力。</h2><p>2.1 第一优势，静态工厂方法有名字<br>2.2 第二个优势，不用每次被调用时都创建新对象<br>2.3 第三个优势，可以返回原返回类型的子类<br>2.4 第四个优势，在创建带泛型的实例时，能使代码变得简洁<br>3.1 可以有多个参数相同但名称不同的工厂方法<br>3.2 可以减少对外暴露的属性<br>参考：<a href="https://www.jianshu.com/p/ceb5ec8f1174" target="_blank" rel="noopener">https://www.jianshu.com/p/ceb5ec8f1174</a></p><p>ps：静态工厂方法和工厂方法模式，抽象工厂模式的区别<br>参考：<a href="https://blog.csdn.net/QuinnNorris/article/details/66977156" target="_blank" rel="noopener">https://blog.csdn.net/QuinnNorris/article/details/66977156</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Cooper&#39;s interview tips summary</title>
      <link href="/2020/03/01/Cooper-s-interview-summary/"/>
      <url>/2020/03/01/Cooper-s-interview-summary/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;上周五晚上在室友群里看到博仔收到了亚麻offer的消息，意味着一年前一起入学，住进同一个townhouse的“四兄弟”全部拿到了flag的实习offer，突然想写点东西来纪念一下过去整整一年的时间，那些大家相互激励相互扶持的日子。<br>&emsp;&emsp;我相信，对于每一个转cs的同学来说，入学第一年开始找暑假实习的过程都会是出国留学计划中最重要的一环，这篇文章将从我自己的角度出发，结合身边同学的经验，希望能够给在题海中挣扎的同学一点帮助。</p></blockquote><a id="more"></a><h2 id="一、转专业时间线"><a href="#一、转专业时间线" class="headerlink" title="一、转专业时间线"></a>一、转专业时间线</h2><p>17年10月- 18年3月 0基础学java ，背题加硬刷 200道题</p><p>18年4月- 18年6月 入学 和室友一起刷50题</p><p>18年6月-18年8月 上算法班 200题</p><p>18年9月-18年10月 集中刷题500题</p><p>10月底拿offer</p><p>总体来说，我一共经历了这四个阶段</p><ol><li>什么都不会，没有思路，花很久时间看懂讨论区的代码然后惊呼一声牛逼，模仿着写，写完了过几天也会忘记。</li><li>稍微对一些算法有一定了解，backtracking，二分法，dp等等，但是知识体系不完整。不知道自己欠缺点在哪里。</li><li>花大量题去完善知识体系，补充薄弱环节。</li><li>体系较完整后集中刷题，medium 难度可以秒,做过两遍的hard可以秒</li></ol><h2 id="二、打好基础"><a href="#二、打好基础" class="headerlink" title="二、打好基础"></a>二、打好基础</h2><p>关于第一阶段相信每个同学在刷题的过程中都会或多或少经历类似的经历，之前看地里很多帖子还有很多学长学姐的经验都说，第一个阶段直接上leetcode没有什么问题，多模仿慢慢就磨出来了，但是以我个人的经验来看，这一步是完全没有收益而且浪费时间的，如果让我重新再来一遍，我肯定不会选择这样的路线，因为刚开始对数据结构和算法不熟悉的时候仅仅靠模仿和背代码是一点也起不到作用的，这一道题你背了stringbuilder的append方法，下一道题背了string.substring（），string.trim（），这样不知道坑有多大就去盲目填坑的行为真的效率低下。</p><p>所以我建议用这个办法来完全代替这第一个阶段：</p><p>假设你是零基础并且选择java，打好基础当然很重要，以我为例，我当时看了传智播客毕老师的java入门，真的是通俗易懂，很多抽象的基础概念都直接很清晰地讲了出来。</p><p>我看了英文版的《head first java 》前9章，这真的是一本神书，而且强烈推荐大家一定要看英文版，因为中文版的翻译有时候过于僵硬，不方便理解，我当时看这本书的感受就是，看了上一页脑海里刚想到一个问题，下一页就立马给出了脑海中这个问题的答案，全程一直在“卧槽？”，看完之后对java的一些基本特性更清晰了（尤其是jvm 这块）</p><p>最后一步我是去了地里找了很多小伙伴一块学ucb的神课cs61b（在这里想提一下公开课的选择，个人感觉mit和普林斯顿的算法课对0基础同学不是很友好，所以算法这一部分我个人不推荐这两门），cs61b这个课属于进阶版的java基础班（和cs61a是一个系列的，61a会讲一些基本java的语法），主要讲数据结构，不过这课load还是很重的，作业和pj都是精挑细选，经过岁月打磨出来的精品（我在网上找到了12年以后的每一个版本和一个05年的版本，老师只有中间的16年换了一次，其余都是一个老师，值得一提的是05年的时候老师头发还很茂密，你懂得）</p><p>我只看了前三分之二，做了两个homework和一个pj，感觉就已经进步很大了，能把这个课刷完的人一定前途无量。地里很多关于cs61b的帖子，大家可以去找微信群一块学，这样不懂的就可以一块讨论。</p><p>至于算法这一块，我并没有提前系统地学过，看过mit的算法课不过很快就放弃了，我不太明白为什么几乎所有算法课上来就都会先讲分治算法，这个算法我在不同版本的网课里看了至少5遍，每次都模棱两可，可能也正是因为这样慢慢磨，到最后来了scu上算法的时候才会那么容易明白很多算法原理，所以我给大家的建议不是上大学的网课，而是去找一个专门培训面试算法班的机构上一个网课，或者在youtube上面找专门讲解某一个算法的视频，在这里为了避嫌我不对算法培训机构做评价，如果感兴趣的同学可以私聊哈。</p><h2 id="三、集中刷题找面经"><a href="#三、集中刷题找面经" class="headerlink" title="三、集中刷题找面经"></a>三、集中刷题找面经</h2><p>打好基础后，就可以进入集中刷题的阶段了，这一阶段我给大家的建议是easy题10分钟做完，分析好时间空间复杂度，medium题15分钟，hard 25分钟争取做完，如果一道hard 10分钟一点思路都没有就不要继续死抠浪费时间了，因为如果在面试时候10分钟没有进展就基本上挂掉了。一天的刷题量我个人来说，开始每天可以到7-8题，每道题都认真做完，甚至可以多尝试几种办法，用多个数据结构，总之一个字，要做“精”。</p><p>到了后期题量和感觉上来了我最多一天达到过20题，不过那时候的大脑真的已经炸掉了。总的来说，刷题就是一个量变引起质变的过程，而且一道题只刷一遍肯定是不够的，我总体来说一共刷了400题，其中有100道左右用了不同方法刷了3-4遍，200道刷了两遍左右。</p><p>集中刷题之后，我们就可以有针对性地对某一个公司进行准备，这时候一亩三分地的面经板块就尤为重要，在这里各大公司的各类面经都有，而且很多都是近期的帖子。</p><h2 id="四、准备面试"><a href="#四、准备面试" class="headerlink" title="四、准备面试"></a>四、准备面试</h2><h3 id="1-投简历"><a href="#1-投简历" class="headerlink" title="1. 投简历"></a>1. 投简历</h3><p>这一部分写在简历已经写好的情况下，简历的问题在这里不会过多赘述，因为我在整个求职的过程中仅和身边同学参考的情况下，简历对于能否拿到面试的影响很小很小（名校满绩大神请忽略我 ），个人认为更多的影响在于两点：<br>（1）公司的招人计划<br>（2）先到先得</p><p>对于flag级别的公司，每年都会招大量的实习生，而且岗位在上一年的暑假就会放出来，加上大量的candidate，很可能会出现迅速满坑的状态，所以一定要早投，不要担心自己没有准备好，从投简历到面试通常需要一个月左右的时间，时间来得及。</p><p>我的情况是，9月15号开始两天之内找认识的前辈帮忙内推了fla三家，其中a家因为当时没有招实习生计划简历拒掉（当时身边认识的人全军覆没），l家因为晚投了两周简历拒（比我早投两周的同学都得到了hr的反馈，之后投的全军覆没），f家一周后收到hr邮件（f家战线还算比较长，陆陆续续一直到今年2月份还有收到offer 的），g家海投，没有找内推。</p><p>当然，漫漫找工季，单单指望flag是远远不够的，除了flag，我和室友们成立了投简历小组，这一点特别感谢博仔，很早很早就号召我们早投简历，三个人共享一个google doc，分别在不同的途径找投简历的链接，我主要是在linkedin上面找，在搜索栏输入2019 summer software develop engineer intern，每天都会有大大小小的公司的职位放出来，那时候每天刷题之余的放松途径就是投6-7封简历，每投出去一封，就好像是放出去一个信鸽，希望它能带回来好的消息。一周多的时间，投出了100多家公司，其中百分之60杳无音信，没有消息的公司名字现在几乎都已经忘了，其余的百分之30发来拒信，剩下百分之十发来oa意思一下（这里说意思一下的意思是很多公司是无脑发oa，甚至还没确定要不要招人也会先发个oa让你做着）。</p><h3 id="2-约面试"><a href="#2-约面试" class="headerlink" title="2. 约面试"></a>2. 约面试</h3><p>关于约面试的时间，我觉得用四个字形容就是：越早越好。有的同学会因为自己刷题不够而害怕，也会因为简历没有写好而不敢投，我觉得只要不是没刷够100题的情况，都是可以立刻投简历和约面试的，人有时候不逼自己一把，根本不会发现自己的潜力。而且那么多人都在投，晚一天都很有可能失去机会，我约的第一个面试是intuit，本来约的10月19号，后来提前到了12号，同期19号面的不错的同学也因为坑满了而没有拿到offer。g家当时约到了2周之后，其实在当时已经刷了大量题的情况下，最重要的不是去接触新题，而是尽量不在自己的易错点上犯错误。</p><h3 id="3-mock-interview"><a href="#3-mock-interview" class="headerlink" title="3. mock interview"></a>3. mock interview</h3><p>mock interview 是准备面试里最重要的一环，我建议在面试前至少进行找不同的人进行2-3次mock interview，因为在这个环节里我们可以直接发现自己在将来面试中会出现的一些错误，尤其是很多表达和分析代码的能力，平时写代码的时候我们是处在这样的模式下：</p><p>（1）leetcode 里看到题目和例子<br>（2）在leetcode里给出的固定函数接口下根据输入书写代码<br>（3）跑test case，提交代码以发现新的edge case<br>（4）修改代码以看到绿色accept</p><p>但是实际的面试中可能会是完全不一样的环境，界面是完全空白的写代码的区域，题目是面试官口头介绍或者是直接粘贴过来，句子可能会不好理解，例子也需要面试官给出，没有leetcode的函数接口，自己根据面试官的要求来书写函数框架，在书写代码前需要和面试官讲解思路，讨论edge case……. 1point3acres</p><p>这些不同之处会让一直在lc里写代码的同学非常不适应，再加上面试时可能会出现的各种情绪，mock 就显得尤为重要。</p><h2 id="五、面试经验"><a href="#五、面试经验" class="headerlink" title="五、面试经验"></a>五、面试经验</h2><p>在这一部分我不针对某个公司，而是希望以一个更general的角度来给一点面试的经验，我没有经历过onsite面试（想请求去google onsite被无情拒绝）面试的形式可能是电话面试也可能是电脑里的视频面试，面试内容就是算法题（个别公司会对除算法外的能力进行过多考察，如intuit的最终面是75分钟的项目和ood面试，在这里不过多讨论。</p><h3 id="面试三要素"><a href="#面试三要素" class="headerlink" title="面试三要素"></a>面试三要素</h3><p>基于“面试官能给你最高的评价是：我想和这个面试者做同事” 和 我个人及身边同学的面试经验，我总结出三点面试原则：</p><h4 id="1-keep-talking"><a href="#1-keep-talking" class="headerlink" title="1. keep talking"></a>1. keep talking</h4><p>面试时要保持交流，面试官也是sde，把不工作的时间拿出来给你面试肯定是不希望对着一个哑巴说话的，为了体现你的态度，keep talking是最基本的礼仪，有同学会说写代码的时候没法保持keep talking，那也没关系，我们可以写完某一块代码，然后再给面试官解释这一部分代码的含义。</p><h4 id="2-keep-smiling"><a href="#2-keep-smiling" class="headerlink" title="2. keep smiling"></a>2. keep smiling</h4><p>不管是视频面试还是电话面试，这一步都至关重要，视频面试的话，笑一笑可以给面试官一种很有亲和力的感觉，会让人感觉很容易交流。另外一点，之前看过一个ted演讲，里面讲的就是人不仅可以通过情绪来影响面部表情，反之亦然，笑一笑也会让自己心态更轻松，达到更好的状态（和深呼吸有点像）</p><h4 id="3-keep-communicating"><a href="#3-keep-communicating" class="headerlink" title="3. keep communicating"></a>3. keep communicating</h4><p>这一点是我后来加上去的，结合自己和身边同学的例子，有时候我们由于过度紧张，尽管做到了前两步，还是没有达到很好的效果，最主要的原因还是太过于紧张，一直在自言自语而忽视了电话另一头的面试官，communication毕竟是两个人的事情，一个人一直说话而得不到反馈一定不是正常的交流，我在面一家很重要的公司时候，中间自己卡住了大概有将近十分钟，面试官稍微有一些不耐烦，就一直默默不说话，他越不说话我就越慌（我们通常可以根据面试官的反应来判断自己代码的正确性），又纠结了1分钟，我咬了咬牙，然后硬生生地把面试官“揪”回来，让他听我一步步再讲一次算法，每说一步找他要一点反馈，最后把题目讲完，后来的经验告诉我这样做对自己的信心也会有很大的提升，要时刻记住交流是两个人的事情。</p><h3 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h3><ol><li><p>面试开始（1分钟到5分钟不等）：自我介绍，面试官可能会让讲一下之前做过的项目或者一些基本的bq，这一部分就当练习口语和适应交流环境，不用太过紧张。</p></li><li><p>算法题目环节，这时候面试官会粘贴过来一小段题目要求，屏幕上刚刚出现这行字的时候是最让人紧张的，这时候一定要告诉自己放松放松，因为越紧张越容易读错题目，同时面试官会口头解释题目的含义，这时候有不明白的地方一定要立刻指出来，不要害怕面试官会不开心，“面试官有义务澄清好题目”，题目没给你说清楚是面试官的问题，一个case没听明白就让他再讲一个case，直到明白题意为止。</p></li><li><p>问题清楚之后，就要开始和面试官澄清一些edge case，比如输入为空或者一些不合法的情况，一般情况下面试官都不会刁难，而是说一句假设输入都合法。</p></li><li><p>澄清好各种情况之后，我的建议是在3句话以内讲述你的算法，比如“这道题我想用dfs，遍历一遍的同时记录什么什么，然后xxx来得到什么什么”，希望大家在准备面试的时候可以练习一下这个办法，这样精炼出来的3句话可以让面试官迅速明白你的思路，如果话太多又没有重点，面试官很难get到你的idea，从而影响交流。</p></li><li><p>3句话之后，听听面试官的反馈，如果思路正确他会表示满意，然后让你开始书写代码，也可能再问问你有没有别的办法，这都是一个好的兆头，说明你的办法被认可了，可以继续详细地解释你要用什么数据结构，描述一下算法的具体思路，这里最好充分利用你即将写code的地方，把每种case和对应的operation都列出来。 如果他对你三句话的算法不太满意，一般会说出你这个思路的问题，进而把你转向别的思路，也没有关系，谁也不能保证思路永远是对的。</p></li><li><p>感觉思路讲的差不多了，问一下：“Can I start to code?” 如果面试官对你的思路没有问题就会让你开始code（如果你思路错了他还让你写8成就是要坑你，这种情况几乎不会出现）然后就可以和他确认一下输入数据的格式，是直接写函数还是需要在一个class里面写，然后就按照之前和他澄清的各种case的情况开始写，如果有写comment的习惯最好，可以让代码更加清晰，记得每写完一部分向面试官解释一下这部分代码的目的。</p></li><li><p>如果面试的时候思路卡住了或者写代码的时候写不下去，我建议和面试官这样说：“我有一点想不出来这里是怎么回事了，可以给我2分钟的时间，让我在纸上捋一下思路吗？”面试时谁都会有紧张的情况，没有人会拒绝这样的请求。</p></li><li><p>写完代码之后面试官一般会让你口头跑一个test case（很少有让写main函数来run的，不过如果让这样的话public static void main这些关键词必须会），如果case 对了，code环节就算是结束了。然后分析一下时空复杂度，算法部分就算是完成了。</p></li><li><p>最后几分钟是对面试官提问的环节，这部分和面试结果影响不大（只要不触碰雷区，问自己的面试表现这类弱智问题），放松就好。</p></li></ol><h2 id="六、说点感言"><a href="#六、说点感言" class="headerlink" title="六、说点感言"></a>六、说点感言</h2><p>我觉得我真的足够幸运，能有机会来到地理位置优越的scu，遇到身边这么多可爱的同学和给力的大佬室友们，后来遇到了帮我无私内推的哥哥姐姐们。</p><p>说到地理位置和环境因素，我想提到的一点是，其实我们每个个体也可以成为环境的一部分，从前我只是听说scu找工作环境好，身边同学找工氛围很浓厚，我的感受是到了9月份中旬，这种氛围是从我家里的三个人开始营造的，慢慢也吸引了周围的大家，后来每天大家讨论的话题都变成了你投了哪个哪个公司，你在做哪个哪个oa，什么时候电面这样。</p><p>在这里感谢一下刷题小组的同学们，大家每天在白板或者在twich上直播讲题，坚持了一个多月才有后来的结果（特别感谢鹏鹏帮我mock了5-6次，压中了一道高频）。从前我最担心的就是面试时不知道如何把思路讲出来，在这段时间的锻炼中也算慢慢变成了一个刷题老司机。</p><p>最后还要特别感谢我的三个室友，晨哥刚入学时给我讲解了很多算法，博仔，越越在后期抽出很多时间帮我mock（面试前一天晚上越越两道题全部压中），有点怀念那时候在家里白板上秒题的时光，记得有时候吃饭的时候讨论讨论着就放下筷子就拿着记号笔去白板上写思路了，如果没有室友们的帮助，我肯定不会这么顺利。四个FLAG 的offer也算是最好的结局。</p><p>最后送大家一句鸡汤：最后的结局总是好的，如果不是，说明还没到最后。</p><p>祝大家都能成功上岸，拿到自己心仪的offer！</p><p>ps 一张家里的全家福</p><p><img src="/2020/03/01/Cooper-s-interview-summary/img/quanjiafu.jpeg" alt="header"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
